<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildThisFileDirectory)SKAssets.targets" />
	<Import Project="$(MSBuildThisFileDirectory)SKShaders.targets" />

	<!-- Copy the package's native libraries into the project, for those
	     platforms that require it. -->
	<Target Name="StereoKitLibraries" BeforeTargets="AfterBuild" Condition="'$(OutputType)'!='Library'">
		<Message Importance="high" Text="[StereoKit NuGet] Copying native libraries for .NET $(SKBuildNET) $(SKBuildPlatform)."/>

		<!-- The managed .pdb is not copied by default, so we copy it here to
		     enable debugging of the managed dll.-->
		<Copy
			SourceFiles        = "$(MSBuildThisFileDirectory)../lib/netstandard2.0/StereoKit.pdb"
			DestinationFolder  = "$(OutputPath)"
			SkipUnchangedFiles = "true"/>
		
		<ItemGroup Condition="'$(SKBuildPlatform)'=='Desktop'">
			<SKSourceFolder Include="$(MSBuildThisFileDirectory)../runtimes/linux-arm64/*.*" />
			<SKSourceFolder Include="$(MSBuildThisFileDirectory)../runtimes/linux-x64/*.*" />
			<SKSourceFolder Include="$(MSBuildThisFileDirectory)../runtimes/win-x64/*.*" />
		</ItemGroup>
		<Copy
			SourceFiles        = "@(SKSourceFolder)"
			DestinationFolder  = "$(BaseIntermediateOutputPath)lib/%(RecursiveDir)"
			SkipUnchangedFiles = "true"/>

		<!-- .NET Core 2.x behaves fine using the above for publishing, but
		     not for development. So! This is a manual copy that happens by
		     default on other versions of .Net Core.-->
		<Copy
			Condition          = "'$(SKBuildNET)'=='Core' and $(TargetFrameworkVersion.StartsWith('v2.'))"
			SourceFiles        = "@(SKSourceFolder)"
			DestinationFolder  = "$(OutputPath)runtimes/%(RecursiveDir)"
			SkipUnchangedFiles = "true"/>

		<!-- .NET Framework projects also seem to have the same issue. This
		     doesn't work for Publish, however. -->
		<Copy
			Condition          = "'$(SKBuildNET)'=='Framework'"
			SourceFiles        = "$(MSBuildThisFileDirectory)../runtimes/win-x64/native/StereoKitC.dll"
			DestinationFolder  = "$(OutputPath)"
			SkipUnchangedFiles = "true"/>

		<!-- .NET MAUI's windows projects pretend they're UWP, and grab UWP
		     binaries automatically, instead of the more appropriate Win32
		     ones. -->
		<Copy
			Condition          = "'$(SKBuildPlatform)'=='CoreWindows'"
			SourceFiles        = "$(MSBuildThisFileDirectory)../runtimes/win-x64/native/StereoKitC.dll"
			DestinationFolder  = "$(OutputPath)"
			SkipUnchangedFiles = "true"/>
	</Target>
	
	<!-- Link libraries directly in Xamarin and Maui Android projects. -->
	<ItemGroup Condition= "'$(SKBuildPlatform)'=='Android'">
		<AndroidNativeLibrary Abi="arm64-v8a" Include="$(BaseIntermediateOutputPath)lib/android-arm64/native/libStereoKitC.so"/>
		<AndroidNativeLibrary Abi="arm64-v8a" Include="$(BaseIntermediateOutputPath)lib/android-arm64/native/libopenxr_loader.so" />
	</ItemGroup>

	<!-- This adds .NET Core support to MAUI multi-target style projects,
	     MAUI's UI doesn't really support .NET Core/Linux, but SK does. -->
	<PropertyGroup Condition="'$(SingleProject)' == 'true'">
		<NetCoreRootProjectFolder Condition="'$(PlatformsProjectFolder)'==''">Platforms\</NetCoreRootProjectFolder>
		<NetCoreRootProjectFolder Condition="'$(PlatformsProjectFolder)'!=''">$(PlatformsProjectFolder)</NetCoreRootProjectFolder>
		<EnableDefaultNetCoreItems>false</EnableDefaultNetCoreItems>
		<NetCoreProjectFolder Condition=" '$(NetCoreProjectFolder)' == '' ">$(NetCoreRootProjectFolder)NetCore\</NetCoreProjectFolder>
		<NetCoreProjectFolder>$([MSBuild]::EnsureTrailingSlash('$(NetCoreProjectFolder)'))</NetCoreProjectFolder>
	</PropertyGroup>
	<ItemGroup Condition="'$(UseMaui)' == 'true'">
		<MauiPlatformSpecificFolder Include="$(NetCoreProjectFolder)" TargetPlatformIdentifier="" />
	</ItemGroup>
	
	<Target Name="SKMauiCore" BeforeTargets="_MauiRemovePlatformCompileItems" Condition="'$(SKBuildPlatform)'=='Desktop' and '$(SingleProject)' == 'true' and '$(UseMaui)' == 'true' and ('$(SKNetCoreMultiTarget)' == 'true' or '$(SKNetCoreMultiTarget)' == '')">
		<Message Importance="high" Text="[StereoKit NuGet] Adding .NET Core multi-target support."/>
		<ItemGroup>
			<!-- This 'Include' property is the magical key to the kingdom!!
			     The core problem is an order of operations issue, and putting
			     this in the Target fixes things. The 'Update' attribute won't
			     work in Targets though, so we're technically duplicating the
			     Compile element here. That's okay though, because the
			     previous duplicate has been excluded! -->
			<Compile
				Include="$(NetCoreProjectFolder)**/*.cs">
				<ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
			</Compile>
		</ItemGroup>
	</Target>

	<!-- Some debug logging for the properties here -->
	<Target Name="StereoKitVars" BeforeTargets="AfterBuild">
		<Message Importance="high" Text="[StereoKit NuGet] TargetFramework            : $(TargetFramework)"/>
		<Message Importance="high" Text="[StereoKit NuGet] TargetFrameworkIdentifier  : $(TargetFrameworkIdentifier)"/>
		<Message Importance="high" Text="[StereoKit NuGet] GetTargetPlatformIdentifier: $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))"/>
		<Message Importance="high" Text="[StereoKit NuGet] SKBuildPlatform            : $(SKBuildPlatform)"/>
		<Message Importance="high" Text="[StereoKit NuGet] SKBuildNET                 : $(SKBuildNET)"/>
	</Target>
</Project>